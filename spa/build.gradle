plugins {
    id "com.moowork.gulp" version "0.9"
}

dependencies {
    // Rest services dependency
    compile project(":rest")
}

gretty {
    inplaceMode = 'hard'
}

ext {
    isDevelopmentModeRun = false
}

project.afterEvaluate {

    appRun.dependsOn 'gulp_init', 'runResourcesWatcher'
    runResourcesWatcher.mustRunAfter 'gulp_init'

    // Runs distributive version of the application under embedded jetty container
    task distAppRun {

        dependsOn 'gulp_buildDist', 'appRun'
        appRun.mustRunAfter 'gulp_buildDist'
        gulp_buildRelease.mustRunAfter 'gulp_init'

        //dependsOn.add 'appRun'
        doFirst {
            println "Running distAppRun task..."
        }

        doLast {
            appRun.execute()
        }
    }

    war {
        webAppDirName = '/'
        dependsOn 'gulp_init'
        includes.add  'app/'
    }

    gradle.taskGraph.whenReady { graph ->

        // Change web folder in case of distributive run
        if (graph.hasTask(distAppRun)) {
            war {
                webAppDirName = '/dist'
            }
        }

        // Development mode run detection
        if (graph.hasTask(appRun) && !graph.hasTask(distAppRun)) {
            isDevelopmentModeRun = true
        }
    }

}

/**
 *  Runs gulp resources watcher task
 */
task runResourcesWatcher() {

    onlyIf {isDevelopmentModeRun}

    doLast {
        // Need to run gulp task as separate process
        ProcessBuilder pb = new ProcessBuilder('cmd', '/C', 'start', '\"Resources Watcher\"', 'gradle', 'gulp_watch');
        pb.start();
    }
}

// Make sure that npm & gulp installed each time before gulp task run
tasks.addRule('') { String taskName ->

    if (taskName.startsWith("gulp_")) {
        project.getTasksByName(taskName, false).each {
            it.dependsOn 'npmInstall', 'installGulp'
            installGulp.mustRunAfter 'npmInstall'
        }
    }
}

// Automatically download and install Node and NPM if they are not presented
node {

    // Version of node to use.
    version = '0.12.2'

    // Enabled the automatic download. False is the default (for now).
    download = !property('use.globally.installed.node');
}